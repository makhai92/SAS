<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.sas.store.model.dao.StoreDao">


	<select id="checkEmail" resultType="store">
		select * from store where so_email=#{soEmail}
	</select>
	
	
	<insert id="insertStoreOwner">
		insert into store values(store_seq.nextval, 
							    #{soEmail}, 
							    null, 
							    #{businessNumber},
							    null, 
							    null, 
							    null, 
							    null, 
							    null, 
							    null, 
							    null, 
							    null, 
							    null, 
							    #{soName}, 
							    #{soPhone}, 
							    0, 
							    null, 
							    0, 
							    null, 
							    null, 
							    null, 
							    1, 
							    null,
							    to_char(sysdate,'yyyy-mm-dd'),
							    null)
	</insert>
	
	
	<update id="insertStore">
		update store set 
			store_name=#{storeName}, 
			store_time=#{storeTime}, 
			store_phone=#{storePhone}, 
			store_addr=#{storeAddr}, 
			store_class=#{storeClass} 
		where business_number=#{businessNumber}
	</update>
	<select id="totalCount" resultType="int">
		select count(*) from store 
		 		where regist_type = #{storeType}
	</select>
	<select id="selectApprovalStore" resultType="store">
		select * from
			(select rownum as rnum, s.* from(
			    select
			        store_no,
			        business_number,
			        store_request_date,
			        so_email,
			        so_phone,
			        so_name,
			        to_char(store_enroll_date,'yyyy-mm-dd') as store_enroll_date
			    from store 
		 		where regist_type = #{storeType} and type=1
			     order by store_no desc)s)
			where rnum between #{pi.start} and #{pi.end}
	
</select>
<select id="storeEmailselect" resultType="store">
	select so_email from store where store_no = #{storeNo}
</select>

<!-- 안되면 수진 favorite 수정해야함 -->
	<select id="getStoreinfo" resultMap="getStore">
		select store_no, store_name, store_addr, store_introduce, store_time,store_phone
		<if test="userNo!=0">
		, (select count(*) from favorite join favorite_folder using(favorite_folder_no) where store_no=#{storeNo} and user_no = #{userNo}) is_favorite
		</if>
		from store 
		
		where store_no = #{storeNo}
	</select>
	<resultMap id="getStore" type="store">
	    <result column="store_no" property="storeNo" />
	    <result column="store_name" property="storeName" />
	    <result column="store_time" property="storeTime" />
	    <result column="store_introduce" property="storeIntroduce" />
	    <result column="store_addr" property="storeAddr" />
	    <!-- 
	    <result column="si_filepath" property="siFilepath" /> : si-filepath가 한개가 아니기 때문에  collection
	     -->
	    <result column="is_favorite" property="isFavorite" />
	    <collection property="siFilepathList" select="selectSiFilepath" column="store_no" javaType="java.util.List" ofType="storeFile"/>
	    <collection property="storeAmenityList" select="selectStoreAmenity" column="store_no" javaType="java.util.List" ofType="storeAmenities"/>
	</resultMap>
	<select id="selectStoreAmenity" resultType="storeAmenities">
		select amenities from store_amenities where store_no=#{storeNo}
	</select>
	
	<select id="selectOneStoreInfo" resultType="store">
		select store_no, store_name, store_addr, store_phone, store_time,business_number,so_name,so_phone,map_x,map_y
		from store 
		where store_no = #{storeNo}
	</select>

	
	<update id="approvalStore">
		update store set
			<if test="registType ==1">
				so_pw =#{soPw},
			</if>
			regist_type = #{registType},
			service_price = 1000,
			store_enroll_date = sysdate
			where store_no = #{storeNo}
	</update>
	
	
	<select id="searchStoreOwner" resultType="store">
		select * from store where so_email=#{soEmail}
	</select>
	
	
	<update id="changePw">
		update store set so_pw=#{soPw} where so_email=#{soEmail}
	</update>

	
	<select id="selectAllPayStore" resultType="store">
		select so_email,store_no from store where to_char(store_enroll_date,'dd') = to_char(sysdate-1,'dd')
	</select>
	<!-- 
	이미지등록되면 구현하기로한 올스토얼 ~~~
		<selectKey order="BEFORE" resultType="int" keyProperty="si_file_no">
			select min(si_file_no) from store_image_file where store_no=#{storeNo}
		</selectKey>
	
	 -->
	
	

	<select id="selectSiFilepath" resultType="storeFile">
		select si_filepath from store_image_file where store_no = #{storeNo}
	</select>

	<select id ="selectAllstore" resultType="store">
		select store_no,store_name,store_time,store_introduce,store_addr from store
	</select>
	 
	 
	 
	<select id="checkPw" resultType="store">
		select * from store where so_email=#{soEmail} and so_pw=#{soPw}
	</select>
	
	
	<update id="insertStoreFrm">
		update store set
			store_name=#{storeName},
			store_phone=#{storePhone},
			store_introduce=#{storeIntroduce},
			store_addr=#{storeAddr},
			store_re_start=#{storeReStart},
			store_re_end=#{storeReEnd},
			break_time_start=#{breakTimeStart},
			break_time_end=#{breakTimeEnd},
			deposit=#{deposit},
			store_class=#{storeClass},
			map_x = #{mapX},
			map_y = #{mapY}
		where store_no=#{storeNo}
	</update>
	
	
	<insert id="insertStoreFile">
		insert into store_image_file values(store_image_file_seq.nextval, #{siFileName}, #{siFilepath},#{storeNo})
	</insert>
	
	
	
	<insert id="insertSeat">
		insert into seat values(seat_seq.nextval, #{seatCapacity}, #{seatAmount}, #{storeNo})
	</insert>
	
	<update id="contractExpire">
		update store set regist_type=3 where store_no = #{storeNo}
	</update>
	
	<select id="getStoreReserveInfo" resultMap="getStoreReservation">
		select store_no, store_re_start, store_re_end, break_time_start, break_time_end, deposit from store where store_no=#{storeNo}
	</select>
	<resultMap type="store" id="getStoreReservation">
		<result column="store_no" property="storeNo"/>
		<result column="store_re_start" property="storeReStart"/>
		<result column="store_re_end" property="storeReEnd"/>
		<result column="break_time_start" property="breakTimeStart"/>
		<result column="break_time_end" property="breakTimeEnd"/>
		<result column="deposit" property="deposit"/>
		<collection property="seatList" select="selectSeatList" column="store_no" javaType="java.util.List" ofType="seat"/>
	</resultMap>
	<select id="selectSeatList" resultType="seat">
		select seat_no, seat_capacity, seat_amount from seat where store_no=#{storeNo}
	</select>
	
	<insert id="insertStoreMood">
	  insert into store_mood values
	    (store_mood_seq.nextval, #{mood}, #{storeNo})
	</insert>
	
	
	<insert id="insertStoreAmenities">
		insert into store_amenities values (store_amenities_seq.nextval, #{amenities}, #{storeNo})
	</insert>
	
	
	<select id="checkBusinessNumber" resultType="store">
		select * from store where businessNumber=#{businessNumber}
	</select>
	<select id="kakaoMapStore" resultType="store">
		select  store_no,store_name,store_addr,so_name,store_phone,map_x,map_y,(select si_filepath from store_image_file b where b.store_no = s.store_no and rownum =1) as si_filepath from store s
	</select>
	
	
<!-- 	<select id="selectStorePayList" resultType="storePayment">
		select store_pay_no, store_pay_date, store_total_price, store_pay_status, store_pay_request_date from store_pay where store_no=#{storeNo} order by store_pay_request_date desc
	</select> -->
	
	<select id="storeMonthPayCount" resultType="storePayment">
		select 
			nvl(sum(reserve_people)*(select service_price from store where store.store_no =r.store_no),0) as store_total_price,
			nvl(sum(reserve_people),0) as store_total_using_count
		from reservation r 
		where store_no =#{storeNo} and 
		to_char(reserve_date,'yyyy-mm-dd') between to_char(add_months(sysdate-1,-1),'yyyy-mm-dd') and to_char(sysdate-1,'yyyy-mm-dd') 
		group by store_no
	</select>
	<insert id="insertStoreMonthPay">
		insert into store_pay values(store_pay_seq.nextval,#{storeNo},null,null,#{storeTotalPrice},1,sysdate,#{storeTotalUsingCount})
	</insert>
	
	
	<select id="selectStorePayList" resultType="storePayment">
	  select rnum, store_pay_no, store_total_price, store_pay_request_date, store_pay_date, store_pay_status
	  from (
	    select rownum as rnum, p.* 
	    from (
	      select 
	        store_pay_no,
	        store_pay_date,
	        store_total_price,
	        store_pay_status,
	        store_pay_request_date
	      from store_pay 
	      where store_no=#{storeNo} 
	      order by store_pay_request_date desc
	    ) p
	  )
	</select>
	
	
	<update id="storePaySuccess">
		update store_pay set store_pay_date=sysdate, store_pay_status=2 where store_pay_no=#{storePayNo}
	</update>


	<select id="selectStoreFavorite" resultType="favoriteStore">
		select store_name, 
					store_time, 
					store_addr, 
					store_introduce, 
					nvl(round(avg(review_score),1),0)review_score_avg  
		from store left outer join review using(store_no)  
		where store_no = #{storeNo} 
		group by store_no, store_name, store_time, store_addr, store_introduce
	</select>


<select id="selectOneSoEmail" resultType="store">
	select so_email from store where store_no = #{storeNo}
</select>
</mapper>
