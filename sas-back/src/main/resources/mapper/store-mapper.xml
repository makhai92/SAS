<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.sas.store.model.dao.StoreDao">


	<select id="checkEmail" resultType="store">
		select * from store where so_email=#{soEmail}
	</select>
	
	
	<insert id="insertStoreOwner">
		insert into store values(store_seq.nextval, 
							    #{soEmail}, 
							    null, 
							    #{businessNumber},
							    null, 
							    null, 
							    null, 
							    null, 
							    null, 
							    null, 
							    null, 
							    null, 
							    null, 
							    #{soName}, 
							    #{soPhone}, 
							    0, 
							    null, 
							    0, 
							    null, 
							    null, 
							    null, 
							    1, 
							    null,
							    to_char(sysdate,'yyyy-mm-dd'),
							    null)
	</insert>
	
	
	<update id="insertStore">
		update store set 
			store_name=#{storeName}, 
			store_time=#{storeTime}, 
			store_phone=#{storePhone}, 
			store_addr=#{storeAddr}, 
			store_class=#{storeClass} 
		where business_number=#{businessNumber}
	</update>
	<select id="totalCount" resultType="int">
		select count(*) from store 
		 		where regist_type = #{storeType}
	</select>
	<select id="selectApprovalStore" resultType="store">
		select * from
			(select rownum as rnum, s.* from(
			    select
			        store_no,
			        business_number,
			        store_request_date,
			        so_email,
			        so_phone,
			        so_name
			    from store 
		 		where regist_type = #{storeType}
			     order by store_no desc)s)
			where rnum between #{pi.start} and #{pi.end}
	</select>
	<select id="getStoreinfo" resultType="store">
		select store_no, store_name, store_addr, store_introduce, store_time
		from store 
		where store_no = #{storeNo}
	</select>

	
	<update id="approvalStore">
		update store set
			<if test="registType ==1">
				so_pw =#{soPw},
			</if>
			regist_type = #{registType},
			service_price = 1000,
			store_enroll_date = sysdate
			where store_no = #{storeNo}
	</update>
	
	
	<select id="searchStoreOwner" resultType="store">
		select * from store where so_email=#{soEmail}
	</select>
	
	
	<update id="changePw">
		update store set so_pw=#{soPw} where so_email=#{soEmail}
	</update>

	
	<select id="selectAllPayStore" resultType="store">
		select so_email from store where to_char(store_enroll_date,'dd') = to_char(sysdate-1,'dd')
	</select>
	<select id ="selectAllstore" resultType="store">
		<!-- 
			이미지 업로드까지 되면 다시 할 예정		
		<selectKey order="BEFORE" resultType="int" keyProperty="si_file_no">
			select min(si_file_no) from store_image_file where store_no=#{storeNo}
		</selectKey>
		 -->
		select store_no,store_name,store_time,store_introduce,store_addr from store
	</select>
	
	<select id="checkPw" resultType="store">
		select * from store where so_email=#{soEmail} and so_pw=#{soPw}
	</select>
	
	
	<update id="insertStoreFrm">
		update store set
			store_name=#{storeName},
			store_phone=#{storePhone},
			store_introduce=#{storeIntroduce},
			store_addr=#{storeAddr},
			store_re_start=#{storeReStart},
			store_re_end=#{storeReEnd},
			break_time_start=#{breakTimeStart},
			break_time_end=#{breakTimeEnd},
			deposit=#{deposit}
		where store_no=#{storeNo}
	</update>
	
	
	<insert id="insertStoreFile">
		insert into store_image_file values(si_file_no.nextval, #{storeNo}, #{siFileName}, #{siFilepath})
	</insert>
	

	<delete id="deleteStoreMood">
	    delete from store_mood where store_no=#{storeNo}
	</delete>
	

	<insert id="insertStoreMood">
	    insert into store_mood values(store_mood_seq.nextval, #{storeNo}, #{moodNo})
	</insert>
	
	

	<delete id="deleteStoreAmenities">
	    delete from store_amenities where store_no=#{storeNo}
	</delete>
	

	<insert id="insertStoreAmenities">
	    insert into store_amenities values(store_amenities_seq.nextval, #{storeNo}, #{amenitiesNo})
	</insert>
	
	
	<insert id="insertSeat">
		insert into seat values(seat_seq.nextval, #{seatCapacity}, #{seatAmount}, #{storeNo})
	</insert>
</mapper>
